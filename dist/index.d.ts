import { bindings, event, events, handler, handlers } from './types';
declare class EventEmitter {
    _bindings: bindings;
    constructor(bindings?: bindings);
    hasHandler(event: event, handler: handler): Boolean;
    get(): bindings;
    set(bindings?: bindings): this;
    reset(): this;
    on(event: event, handler: handler): this;
    on(event: event, handler: handlers): this;
    on(event: events, handler: handler): this;
    on(event: events, handler: handlers): this;
    on(event: events | event, handler: handlers | handler): this;
    one(event: event, handler: handler): this;
    one(event: event, handler: handlers): this;
    one(event: events, handler: handler): this;
    one(event: events, handler: handlers): this;
    one(event: events | event, handler: handlers | handler): this;
    off(event: event): this;
    off(event: events): this;
    off(event: event, handler: handler): this;
    off(event: event, handler: handlers): this;
    off(event: events, handler: handler): this;
    off(event: events, handler: handlers): this;
    off(event: events | event, handler?: handlers | handler): this;
    emit(event: event, ...args: any[]): this;
    emit(event: events, ...args: any[]): this;
    emit(event: events | event, ...args: any[]): this;
}
export default EventEmitter;
